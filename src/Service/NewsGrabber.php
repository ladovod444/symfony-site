<?phpnamespace App\Service;use App\Entity\Blog;use App\Repository\BlogRepository;use App\Repository\UserRepository;use Doctrine\ORM\EntityManagerInterface;use GuzzleHttp\Client;use Psr\Log\LoggerInterface;use Symfony\Component\DependencyInjection\Attribute\Autowire;use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;use Symfony\Component\DomCrawler\Crawler;class NewsGrabber{    private Crawler $crawler;    private const USER_ID = 4;    private LoggerInterface $logger;    public function __construct(private readonly UserRepository         $userRepository,                                private readonly EntityManagerInterface $entityManager,                                private readonly BlogRepository         $blogRepository,                                private readonly ParameterBagInterface           $parameterBag)    {    }    public function setLogger(LoggerInterface $logger): self    {        $this->logger = $logger;        return $this;    }    public function importNews(?int $count, bool $dryRun): void    {//        echo __FUNCTION__;//        echo "\n";        $this->logger->info('Start getting news');        $url = 'https://www.engadget.com/news/';        $client = new Client([            // You can set any number of default request options.            'timeout' => 25.0,        ]);        $response = $client->get($url);        //echo $response->getBody()->getContents();        $news = [];        $crawler = new Crawler($response->getBody()->getContents());        $crawler->filter('h4.My\(0\) > a')->each(function (Crawler $crawler) use (&$news, $count) {            if (count($news) >= $count) {                return;            }            $news[] = [                'title' => $crawler->text(),                'href' => $crawler->attr('href'),            ];        });        //dump($news);        unset($crawler);        $this->logger->info(sprintf('Get %d news items', count($news)));        // Из-за плохой скорости сделам пока 3 элемента        foreach ($news as &$item) {            // Проверка на дубли            if ($this->blogRepository->getByTitle($item['title'])) {                $this->logger->info(sprintf('News item %s already exists', $item['title']));                continue;            }            $response = $client->get('https://www.engadget.com/' . $item['href']);            $crawler = new Crawler($response->getBody()->getContents());            $crawlerBody = $crawler->filter('div.caas-body > p')->first();            //dd($crawlerBody->text());            $item['text'] = $crawlerBody->text();            $this->logger->info(sprintf('Parsing news item %s ', $item['title']));//            $count++;//            if ($count == 3) {//                break;//            }        }        unset($item);        //dump($news);        // добавить новости в БД        $this->saveNews($news, $dryRun);    }    private function saveNews(array $news, bool $dryRun): void    {        $this->logger->info('Saving news ... ');        foreach ($news as $item) {            $user = $this->userRepository->find($this->parameterBag->get('author_blog'));            if (!$user) {                $this->logger->error(sprintf('User with Id=%d is not found ', $this->parameterBag->get('author_blog')));                //$this->logger->error(sprintf('User with Id=%d is not found ', static::USER_ID));                //$this->logger->error(sprintf('User with Id=%d is not found ', $authorBlog));                return;            }            //dd($dryRun);            if ($dryRun) { // если dryRun то НЕ записываем в БД                continue;            }            $blog = new Blog($user);//            if ($item['title'] == "Amazon's Smart Thermostat drops to $56 in this early Prime Day deal") {//                continue;//            }//            dump($item['title']);//            dump($item['text']);            if (isset($item['text'])) {                $blog->setTitle($item['title']);                $blog->setDescription($item['text']);                $blog->setText($item['text']);                $blog->setStatus('active');                $this->entityManager->persist($blog);            }//            $count++;//            if ($count == 3) {//                break;//            }        }        // коммитить изменения в БД нужно уже после цикла        $this->entityManager->flush();    }}